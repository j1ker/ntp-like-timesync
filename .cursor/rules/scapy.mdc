---
description: 
globs: 
alwaysApply: true
---
ScapySync时间同步系统开发文档
1. 项目概述
ScapySync是一个基于自定义协议的时间同步演示系统，核心目标是实现两个独立应用程序之间的时间同步。系统由Master（服务器）和Slave（客户端）两个应用组成，通过UDP协议通信。Master设定参考时间，Slave通过网络同步使其内部软件时钟与Master时钟保持一致，整个过程与真实系统时钟隔离。
2. 核心时间同步算法
2.1 四时间戳交换机制
系统采用类似NTP的四时间戳交换机制：
Apply to sync_control...
时间戳含义：
T1: Slave发送请求的时间
T2: Master接收请求的时间
T3: Master发送响应的时间
T4: Slave接收响应的时间
2.2 时钟偏移和网络延迟计算公式
Apply to sync_control...
其中：
offset > 0: Slave时钟落后于Master
offset < 0: Slave时钟领先于Master
2.3 统计过滤机制
为提高测量可靠性，系统在每个同步周期内执行6轮时间戳交换：
收集6组有效的(T1, T2, T3, T4)四元组
计算每组样本的往返延迟RTD
选择RTD最小的样本作为最佳样本
使用最佳样本计算最终offset和delay
2.4 PID频率驯化算法
Slave使用PID控制器调整其软件时钟频率：
Apply to sync_control...
调整后的时钟时间计算：
Apply to sync_control...
3. 系统架构
Apply to sync_control...
3.1 组件功能描述
Master组件:
TimeSource: 提供参考时间源，可设置自定义时间偏移
NetworkServer: 监听UDP端口，处理Slave请求并回复时间戳
MainWindow: 控制界面，提供时间设置和服务器控制
Slave组件:
SoftwareClock: 独立软件时钟，通过PID控制器调整频率
NetworkClient: 发送同步请求，接收响应并计算偏移量
SyncController: 管理同步过程，协调网络客户端和软件时钟
SyncMonitor: 收集偏移量和延迟数据，监控同步状态
ChartWidget: 显示偏移量图表
MainWindow: 控制界面，显示同步状态和控制按钮
4. ScapySync协议规范
4.1 传输层
协议: UDP
端口: 12345 (可配置)
4.2 数据包格式 (27字节)
Apply to sync_control...
Flags: 0x01=Request, 0x02=Reply
Sequence: 2字节无符号短整型，网络字节序
T1: 8字节双精度浮点数，表示Slave发送请求的时间
T2: 8字节双精度浮点数，表示Master接收请求的时间 (Reply包中有效)
T3: 8字节双精度浮点数，表示Master发送响应的时间 (Reply包中有效)
4.3 时间戳交换流程图
Apply to sync_control...
5. 同步过程详细流程图
Apply to sync_control...
6. PID控制器工作流程图
Apply to sync_control...
7. 关键配置参数
7.1 网络配置
Master IP: 127.0.0.1 (默认)
同步端口: 12345
同步超时: 1.0秒
7.2 同步参数
同步间隔: 5秒
每次同步轮数: 6轮
最大序列号: 65535
7.3 PID控制器参数
比例系数(Kp): 0.8
积分系数(Ki): 0.5
微分系数(Kd): 0.1
积分上限: 1.0
积分下限: -1.0
最大频率调整量: 1.0
7.4 状态阈值
同步阈值: 0.001秒 (1毫秒)
主节点离线超时: 15秒
8. 实现注意事项
8.1 时钟隔离
为保证系统演示效果，Slave的软件时钟完全独立于系统时钟：
初始化时记录基准时间点: init_system_time = time.time()
使用性能计数器测量流逝时间: elapsed_perf = time.perf_counter() - init_perf_counter
应用频率调整: adjusted_elapsed = elapsed_perf * (1.0 + rate_adjustment)
计算最终时间: current_time = init_system_time + adjusted_elapsed
8.2 关键性能优化
使用UDP协议减少通信开销
使用struct模块高效打包/解包二进制数据
设置合理超时机制避免阻塞
针对大偏移采用特殊处理策略
8.3 异常处理策略
同步请求超时: 记录日志，连续失败3次后更新状态为错误
序列号不匹配: 忽略该响应包
延迟为负值: 调整为0（理论上不应出现，但可能因测量误差导致）
偏移量过大: 直接设置时钟偏移而非依赖PID驯化
9. 验收标准
Master启动后能正确响应Slave的同步请求
Slave能正确解析响应并计算偏移量
Slave的软件时钟能平滑地调整与Master保持同步
偏移量图表显示偏移随时间逐渐趋近零
Master时间发生变化时，Slave能正确响应并重新同步
系统能正确处理网络异常和主节点离线情况
10. 未来扩展方向
支持多Slave同步模式
实现时钟选择算法，支持多Master模式
添加安全认证机制
优化PID控制参数自适应调节
增加网络环境模拟功能，测试不同网络条件下的同步性能